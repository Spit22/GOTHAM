# Dockerfile Gotham Installation SERVER
FROM debian:jessie

# OS UPDATE
RUN apt-get -y update && apt-get -y dist-upgrade && apt-get -y autoremove && apt-get clean

#INSTALL DEPENDENCIES
RUN apt-get -y install curl git-all rsyslog apt-utils vim apt-transport-https ca-certificates gnupg gnupg-agent software-properties-common pigz openssh-server lsb-release libseccomp2 libdevmapper1.02.1 apparmor && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpgs && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu focal stable" > /etc/apt/sources.list.d/docker.list && \
    chmod a+r /usr/share/keyrings/docker-archive-keyring.gpg


RUN curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && \
    chmod +x /usr/local/bin/docker-compose && \
    ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose && \
    docker-compose --version

RUN apt-get -y update && \
    apt-get -y install docker-ce-rootless-extras docker-ce docker-ce-cli containerd.io


### PREPARE GOTHAM SYSTEM ###
RUN echo "=== Preparing the gotham system... ==="

# Create GOTHAM user as an alias for the root account
RUN useradd -o -u 0 -g 0 -N -d /root/ -M gotham > /dev/null 2>&1

# Configure password
RUN mdp=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w50 | head -n1) && \
    usermod -p "$mdp" gotham && \
    echo "[+] User gotham created with password : $mdp"

# Create the folder used by GOTHAM
RUN mkdir -p /data/tmp && \
    mkdir -p /data/rsyslog/rulebase && \
    mkdir -p /etc/rsyslog.d && \
    mkdir -p /etc/rsyslog.d && \
    echo "[+] All paths created"

### INSTALL DEPENDANCIES ###
RUN echo "=== Installing dependancies... ==="

# Update repo
RUN apt update > /dev/null 2>&1 && \
    echo "[+] APT updated"

# Add docker's GPG key
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - > /dev/null 2>&1 && \
    echo "[+] Docker apt key configured"

# Check we have the correct key fingerprint
RUN aptkey fingerprint 0EBFCD88 | grep "docker@docker.com" > /dev/null 2>&1 && \
    if [ $? != 0 ]; then && \
        echo "Key is not valid" && \
        exit && \
    fi

# Add repository
RUN add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/debian \
   $(lsb_release -cs) \
   stable" > /dev/null 2>&1

# Update repo again
RUN apt update > /dev/null 2>&1

# Test docker
RUN docker run hello-world > /dev/null 2>&1 && \
    echo "[+] Docker successfully installed"

### INSTALL RSYSLOG ###
RUN echo "=== Configuring Rsyslog... ==="

# Pre-configure rsyslog
RUN touch /etc/rsyslog.d/00-JSON_template.conf && \
    echo ''' \
    module(load="mmnormalize") \
    template(name="all-json-template" type="list"){ \
        constant(value="{") \
        constant(value="\"tag\":\"")   property(name="programname" format="json") \
        constant(value="\",") \
        property(name="$!all-json" position.from="2") \
    } \
    template(name="default-template" type="list") { \
        constant(value="{") \
            constant(value="\"timestamp\":\"")     property(name="timereported" dateFormat="rfc3339") \
            constant(value="\",\"host\":\"")        property(name="hostname") \
            constant(value="\",\"severity\":\"")    property(name="syslogseverity-text") \
            constant(value="\",\"tag\":\"")   property(name="programname" format="json") \
            constant(value="\",\"message\":\"")    property(name="msg" format="json") \
        constant(value="\"}") \
    } \
    ''' > /etc/rsyslog.d/00-JSON_template.conf

### INSTALL AND CONFIGURE SSH SERVER ###
RUN echo "=== Installing and configuring SSH... ==="

# Update repo
RUN apt update > /dev/null 2>&1 && \
    echo "[+] APT updated"

# Installation of openssh and base64
RUN echo "[+] SSH Server installed"

# Harden SSH configuration
RUN echo """ \
    Port 22 \
    ListenAddress 0.0.0.0 \
    PermitRootLogin Yes \
    PubkeyAuthentication yes \
    """ > /etc/ssh/sshd_config

# Restart openssh
RUN echo "[+] SSH Server configured"

### GENERATE SSH KEY ###
RUN echo "=== Generating SSH Key... ==="

# Generate a rsa 4096 key pair without passphrase
RUN ssh-keygen -b 4096 -t rsa -f /root/gotham_key -N "" > /dev/null 2>&1

# Copy the public key to authorized keys of root users
RUN mkdir -p /root/.ssh && \
    pubkey=$(cat /root/gotham_key.pub) && \
    echo $pubkey >> /root/.ssh/authorized_keys && \
    chmod -R 600 /root/.ssh

# Restart again ssh
RUN /usr/sbin/service ssh restart > /dev/null 2>&1

# Show base64 encoded private key user has to send to api
RUN echo -e "\n\n[+]Private key : \n" && \
    cat /root/gotham_key | base64 && \
    echo ""

CMD ["/bin/bash"]